package {		/**	 * @author nicoptere	 */	import flash.events.*;		import flash.display.*;	import flash.utils.getTimer;	public class Main extends MovieClip	{				public var tab:Array;		public var bmpd:BitmapData;				public function Main() 		{						var w:int = 400;			var h:int = 400;						bmpd = new BitmapData( w, h, true, 0x00000000 );			var bmp:Bitmap = new Bitmap( bmpd );			addChild( bmp );						tab = new Array();			/*			tab.push( new Point( w/2, -h*10 ) );			tab.push( new Point( -w*10, h*10 ) );			tab.push( new Point(  w*10, h*10 ) );			*/						for ( var i:int = 0; i < 50; i++ )			{				var p:Point = new Point( Math.random() * w, Math.random() * h );				tab.push( p );			}						render();			stage.addEventListener( MouseEvent.MOUSE_DOWN, mouseDownHandler );			stage.addEventListener( Event.ENTER_FRAME, enterFrameHandler );								}				public function mouseDownHandler ( e:MouseEvent ):void		{						var deletion:Boolean = false;						var dx:Number;			var dy:Number;			var dist:Number;						for ( var i:int = 0; i < tab.length; i++ )			{				var p:Point = tab[ i ] as Point;				bmpd.setPixel32( p.X, p.Y, 0xFFFFFFFF );								dx = p.X - mouseX;				dy = p.Y - mouseY;				dist = Math.sqrt( dx*dx + dy*dy );				if( dist < 10 )				{					tab.splice( i, 1);					deletion = true;				}							}									if( !deletion )tab.push( new Point( mouseX, mouseY ) );									render();					}				public function enterFrameHandler ( e:Event ):void		{						for ( var i:int = 0; i < tab.length; i++ )			{				var p:Point = tab[ i ] as Point;				p.X += ( Math.random() - .5 ) * 4;				p.Y += ( Math.random() - .5 ) * 4;			}			render();					}						function render():void		{			var i:int;						var time:Number = getTimer();						bmpd.fillRect(bmpd.rect, 0x000000 );			for ( i = 0; i < tab.length; i++ )			{				var p:Point = tab[ i ] as Point;				bmpd.setPixel32( p.X, p.Y, 0xFF000000 );			}									var delaunay:Array = Delaunay.Triangulate( tab );			var t:Triangle;			graphics.clear();			graphics.lineStyle( 2, 0xCC0000, .2);						for ( i = 0; i < delaunay.length; i++ )			{				t = ( delaunay[ i ] as Triangle );								graphics.moveTo(t.p1.X, t.p1.Y);				graphics.lineTo(t.p2.X, t.p2.Y);				graphics.lineTo(t.p3.X, t.p3.Y);				graphics.lineTo(t.p1.X, t.p1.Y);																/*					//bmpd.setPixel( p.p1.X, p.p1.Y, 0xFF0000 );				//	Raster.line( bmpd, t.p1.X, t.p1.Y, t.p2.Y, t.p2.Y, c );										//bmpd.setPixel( tab[ i ].p2.X, tab[ i ].p2.Y, 0xFF0000 );				//	Raster.line( bmpd, t.p2.X, t.p2.Y, t.p3.Y, t.p3.Y, c );										//bmpd.setPixel( tab[ i ].p3.X, tab[ i ].p3.Y, 0xFF0000 );				//	Raster.line( bmpd, t.p3.X, t.p3.Y, t.p1.Y, t.p1.Y, c );				*/			}						Voronoi.draw( delaunay, this );						trace(getTimer() - time + " ms");		}			}}